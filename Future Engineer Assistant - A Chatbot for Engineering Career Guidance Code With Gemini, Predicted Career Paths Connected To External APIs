library(httr)
library(shiny)
library(DT)
library(jsonlite)
library(plotly)
library(shinyjs)
library(digest)
library(lubridate)
library(visNetwork)

# Functions
getCareerPathSteps <- function(career_path, api_key) {
  prompt <- paste("List the steps required to reach the highest or chief level for the career path:", career_path)
  response <- generateContent(prompt, api_key)
  return(response)
}

generateContent <- function(prompt, api_key) {
  headers <- c(`Content-Type` = "application/json")
  params <- list(`key` = api_key)
  data <- sprintf('{"contents": [{"parts":[{"text": "%s"}]}]}', prompt)
  res <- httr::POST(
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent",
    httr::add_headers(.headers = headers),
    query = params,
    body = data
  )
  return(content(res)$candidates[[1]]$content$parts[[1]]$text)
}

generateCareerQuestions <- function(api_key) {
  prompt <- "Generate 12 personalized questions related to career choices for engineering students."
  return(unlist(strsplit(generateContent(prompt, api_key), "\n")))
}

predictCareerPaths <- function(answers, api_key) {
  if (length(answers) == 0) {
    return(NULL)
  }

  prompt <- paste("Based on the following user responses, please suggest 5 very specific career paths for an engineering student:", paste(answers, collapse = " "))
  response <- generateContent(prompt, api_key)
  return(unlist(strsplit(response, ",")))
}

predictSalary <- function(job_title, experience, api_key) {
  prompt <- paste("What is the expected salary for a", job_title, "with", experience, "experience in the engineering field?")
  response <- generateContent(prompt, api_key)
  return(response)
}

loadUserData <- function() {
  if (file.exists("user_data.csv")) {
    return(read.csv("user_data.csv", stringsAsFactors = FALSE))
  }
  return(data.frame(Username = character(), Password = character(), stringsAsFactors = FALSE))
}

saveUserData <- function(user_data) {
  write.csv(user_data, "user_data.csv", row.names = FALSE)
}

connectCareerToChatbot <- function(input_question, predicted_paths, api_key) {
  if (any(grepl("major|subject|study|education|field|college", input_question, ignore.case = TRUE))) {
    career_paths_string <- paste(predicted_paths, collapse = ", ")
    response <- generateContent(paste("Given the predicted career paths:", career_paths_string, ". What majors or educational paths should I consider?"), api_key)
  } else if (any(grepl("career|job|path|profession|engineer|engineering", input_question, ignore.case = TRUE))) {
    response <- generateContent(paste("Based on the predicted career paths:", paste(predicted_paths, collapse = ", "), "Please provide advice on this question:", input_question), api_key)
  } else {
    warning_text <- "Your question doesn't seem to relate to career paths. However, here's the information you've requested:"
    response <- generateContent(input_question, api_key)
    return(list(warning = warning_text, response = response))
  }
  return(list(warning = NULL, response = response))
}

isCareerRelated <- function(input_text, api_key) {
  prompt <- paste("Analyze the following user input and determine whether it relates to career pathways or job-related topics:", input_text)
  analysis_response <- generateContent(prompt, api_key)

  if (grepl("career|job|profession|engineering|major|skills|employment|opportunities", analysis_response, ignore.case = TRUE)) {
    return(TRUE)
  } else {
    return(FALSE)
  }
}

# User Interface
ui <- fluidPage(
  useShinyjs(),
  tags$style(HTML("
    body { background-color: #b04a5e; font-family: 'Times New Roman', serif; color: #333333; font-size: 18px; }
    .navbar { background-color: #ffffff; }
    .navbar a { color: #333333 !important; }
    .container { background-color: rgba(255, 255, 255, 0.9); border-radius: 10px; padding: 25px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); color: #343a40; }
    h1, h3, h4 { color: #000000; text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3); font-size: 22px; }
    .btn { width: 100%; margin: 10px 0; font-size: 16px; border-radius: 25px; background-color: #841617; color: #ffffff; border: none; padding: 10px; transition: background 0.3s ease; }
    .btn:hover { background-color: #6f1417; }
    .footer { text-align: center; padding: 20px; color: #ffffff; }
    .welcome-box, .registration-box, .header-box, .chat-box, .pink-box { background-color: rgba(255, 255, 255, 0.9); border-radius: 15px; padding: 30px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); margin-bottom: 20px; }
    .chat-box { max-height: 300px; overflow-y: auto; }
    .chat-history { max-height: 400px; overflow-y: auto; background-color: #e8e8e8; padding: 15px; border-radius: 10px; margin-top: 10px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); }
    .bubble-title { text-align: center; background-color: #841617; color: #ffffff; border-radius: 25px; padding: 10px 20px; font-size: 24px; margin-bottom: 20px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3); }
    .rect-bubble { background-color: #f9c74f; border-radius: 10px; padding: 15px; margin: 10px 0; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); }
    .table { margin-top: 20px; }
    .progress-box { background-color: #f1f1f1; padding: 15px; border-radius: 10px; margin-bottom: 15px; text-align: center; }
    .scrollable { overflow-y: auto; max-height: 500px; }
    .color-bubble { background-color: #e2e2e2; border-radius: 10px; padding: 15px; margin: 10px 0; position: relative; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); }
    .welcome-message { font-size: 24px; text-align: center; margin: 20px 0; padding: 20px; border: 1px solid #841617; border-radius: 15px; background-color: rgba(255, 255, 255, 0.9); }
    .instructions-box { padding: 20px; border-radius: 15px; background-color: rgba(255, 255, 255, 0.8); margin-bottom: 20px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); }
    .step-box { padding: 15px; border: 2px solid #841617; border-radius: 15px; background-color: rgba(255, 255, 255, 0.9); margin-bottom: 20px; }
    .sticky-title { position: sticky; top: 0; background-color: #841617; color: white; padding: 10px; }
    .completion-box { border: 2px solid #841617; border-radius: 15px; padding: 20px; background-color: rgba(255, 255, 255, 0.9); text-align: center; margin-top: 20px; }
    .important-link { font-size: 18px; font-weight: bold; color: #007bff; text-align: center; margin-top: 10px; }
    
    .chat-container {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      height: 400px; /* Expanded height */
    }
    
    .chat-input {
      flex: 1;
      margin-right: 20px; 
      height: 100%; /* Full height */
    }
    
    .chat-responses {
      flex: 1;
      margin-left: 20px; 
      height: 100%; /* Full height */
    }
    
    .centered-congratulation { text-align: center; font-size: 28px; }
    .career-path { margin-bottom: 10px; }
  ")),

  # Title Section
  tags$div(class = "bubble-title", "Future Engineer Assistant - ShinyGeminiPro App"),
  tags$div(img(src = "cute_robot_logo.png", height = "100px", align = "center")),

      # Login Section
  conditionalPanel(
    condition = "!output.registered && !output.loggedIn",
    fluidPage(
      tags$div(class = "registration-box",
               h3("Login to Future Engineer Assistant"),
               textInput("login_username", "Username *", placeholder = "Enter your username..."),
               passwordInput("login_password", "Password *"),
               actionButton("loginBtn", "Login", class = "btn-primary"),
               tags$div(style = "text-align: center; margin-top: 10px,",
                        tags$a(href = "#", onclick = "Shiny.setInputValue('navigateToRegistration', 1); return false;", "Don't have an account? Sign up", style = "margin-right: 15px;"),
                        tags$a(href = "#", onclick = "Shiny.setInputValue('termsAndConditionsClicked', 1); return false;", "Terms and Conditions", style = "margin-right: 15px;"),
                        tags$a(href = "#", onclick = "Shiny.setInputValue('privacyPolicyClicked', 1); return false;", "Privacy Policy")
               )
      )
    )
  ),

  # Registration Section
  conditionalPanel(
    condition = "output.registered && !output.loggedIn",
    fluidPage(
      tags$div(class = "registration-box",
               h3("Register to Access Future Engineer Assistant"),
               fluidRow(
                 column(4, textInput("first_name", "First Name *", placeholder = "Enter your first name..."),
                        dateInput("dob", "Date of Birth *", format = "mm/dd/yyyy"),
                        textInput("username", "Username *", placeholder = "Enter your username..."),
                        passwordInput("reg_password", "Password *")),
                 column(4, textInput("last_name", "Last Name *", placeholder = "Enter your last name..."),
                        textInput("school", "School *", placeholder = "Enter your school..."),
                        selectInput("year", "Year *", choices = c("Freshman", "Sophomore", "Junior", "Senior")),
                        passwordInput("reg_password_reenter", "Re-enter Password *")),
                 column(4, textInput("email", "Email ID *", placeholder = "Enter your email..."),
                        textInput("phone", "Phone Number", placeholder = "(000) - 000 0000"))
               ),
               fluidRow(
                 column(6, radioButtons("gender", "Gender Identity:",
                                        choices = c("Male", "Female", "Trans Male/Trans Man", "Trans Female/Trans Woman",
                                                    "Genderqueer/Gender Non-Conforming", "Prefer to self-describe, please specify:", "Prefer not to say"))),
                 column(6, checkboxGroupInput("race", "Race/Ethnicity (Please select all that apply):",
                                              choices = c("American Indian or Alaska Native", "Asian", "Black or African American",
                                                          "Hispanic or LatinX", "Native Hawaiian or Other Pacific Islander", "White")))
               ),
               checkboxInput("terms", "I agree to the Terms and Condition and Privacy Policy *", value = FALSE),
               fluidRow(
                 column(6, actionButton("registerBtn", "Register", class = "btn-primary")),
                 column(6, actionButton("nextBtnReg", "Next", class = "btn-primary", disabled = TRUE))
               ),
               fluidRow(
                 column(12, tags$div(style = "text-align: center; margin-top: 10px;",
                                     tags$a(href = "#", onclick = "Shiny.setInputValue('navigateToLogin', 1); return false;", "Already have an account? Login", style = "margin-right: 15px;")
                 )),
                 uiOutput("registration_warning")
               )
      )
    )
  ),

  # Pre-Survey Confirmation
  conditionalPanel(
    condition = "output.loggedIn && !output.preSurveyCompleted",
    fluidPage(
      tags$div(class = "registration-box",
               h3("Pre-Survey Confirmation"),
               tags$p("Please confirm that you have completed the pre-survey."),
               tags$p("Complete this survey and contact me (akshay.singh-1@ou.edu) to ask any questions regarding participation in the research."),
               tags$p("What is the purpose of this research? This research aims to understand engineering students’ perceptions on the use of an AI platform to select their career path."),
               tags$p("How many participants will be in this research? About 300 people will take part in this research."),
               tags$p("What will participants be asked to do? If you agree to be in this research, you will be required to complete three tasks:
                       1. Complete a pre-survey (5–7-minute online survey)
                       2. Interact with the chatbot to obtain predicted career paths (5–30-minute online platform)
                       3. Complete a post-survey (5–7-minute online survey)"),
               tags$a(href = "https://ousurvey.qualtrics.com/jfe/form/SV_0wBJjQYoTv2v0ii", target = "_blank",
                      class = "important-link", "Complete Pre-Survey"),
               checkboxInput("preSurveyCheck", "I have completed the pre-survey.", value = FALSE),
               actionButton("confirmSurveyBtn", "Continue", class = "btn-primary")
      )
    )
  ),

  # Main Content Section
  conditionalPanel(
    condition = "output.preSurveyCompleted",
    tabsetPanel(id = "tabs",
                type = "hidden",
                tabPanel("Introduction",
                         fluidPage(
                           titlePanel(tags$div(class = "header-box", "Introduction")),
                           tags$div(class = "welcome-box",
                                    img(src = "welcome_image.png", height = "200px", align = "center"), 
                                    h3("Introduction"),
                                    p("As the field of engineering continues to grow, undergraduate and graduate students face numerous career choices, making it challenging to decide on the best path. This project’s aim is to establish an interactive chatbot tailored specifically for engineering undergraduates/graduates."),
                                    p("Welcome to the Future Engineer Assistant (FEA) app, a dynamic and interactive platform designed specifically for engineering students navigating the complexities of career selection. In a rapidly evolving field where opportunities abound, finding the right career path can be both exciting and daunting. The FEA harnesses the power of generative AI and natural language processing to engage users in personalized conversations, helping them explore potential career trajectories while aligning their unique skills and interests with industry demands. As you journey through the application, you'll encounter tailored questionnaires, insightful recommendations, and interactive visualizations that empower you to make informed decisions about your future.

Our application is more than just a career guidance tool; it is a comprehensive resource that fosters an open dialogue about your aspirations and concerns. By leveraging advanced technologies, the FEA not only provides practical information but also encourages self-reflection and exploration. The user-friendly interface makes it easy to navigate through various sections, from answering thought-provoking questions to interacting with our AI-powered chatbot. With the FEA guiding you, you'll gain valuable insights into potential career paths, salary expectations, and necessary steps to achieve your professional goals in engineering. Dive in and let us help you shape your future!"),
                                    tags$div(class = "instructions-box",
                                             h3("Instructions:"),
                                             tags$div(class = "step-box",
                                                      tags$h4("Step One: Completing the Personalized Questionnaire"),
                                                      tags$p("In the first step, you will engage with a personalized questionnaire designed to gather insights about your academic career goals, majors, interests, and more. This questionnaire consists of 10-12 unique questions, dynamically generated using the Google Gemini Pro API. Each question is tailored to elicit comprehensive responses that reflect your aspirations and preferences in the field of engineering. As you proceed through the questionnaire, your answers will be used to generate a set of recommended career paths that align with your unique strengths and academic backgrounds. This foundational step aims to equip you with valuable insights into potential career trajectories, fostering a deeper understanding of your professional aspirations."),
                                             ),
                                             tags$div(class = "step-box",
                                                      tags$h4("Step Two: Interacting with the FEA Chatbot"),
                                                      tags$p("The second step involves interacting with the Future Engineer Assistant (FEA) chatbot, where you can ask questions about your predicted career paths and other educational or career-related queries. You have the flexibility to engage with the chatbot either through text or audio input, allowing for a hands-free conversational experience. This dynamic interaction enables you to seek personalized advice and insights tailored to your career interests, providing you with a deeper understanding of the various opportunities available in your chosen field. Whether you wish to explore specific job roles or inquire about related educational pathways, the FEA chatbot is designed to facilitate meaningful discussions that can aid in your decision-making process as you navigate your academic and career journey."),
                                             )
                                    ),
                                    actionButton("continueToQuestionnaire", "Next to Questionnaire", class = "btn-primary")
                           )
                         )
                ),

                tabPanel("Questionnaire",
                         sidebarLayout(
                           sidebarPanel(
                             tags$h4("Instructions"),
                             tags$p("1. Answer the generated questions to receive personalized career recommendations."),
                             tags$p("2. Each answer should be between 3 to 120 words."),
                             tags$p("3. Once all questions are answered, a list of recommended career paths will be provided on the next page."),
                             tags$hr(),
                             uiOutput("questionsProgress")
                           ),
                           mainPanel(
                             tags$div(class = "pink-box",
                                      tags$h4("Chatbot Questions"),
                                      div(class = "chat-history",
                                          uiOutput("currentQuestion")  
                                      ),
                                      tags$hr(),
                                      textAreaInput("chatbotAnswerInput", "Your Answer", placeholder = "Type your answer here...", rows = 4),  
                                      actionButton("submitAnswerBtn", "Submit Answer", class = "btn-primary"),
                                      tags$hr(),
                                      uiOutput("predictedCareerPaths"),
                                      uiOutput("errorMessage"),  
                                      tags$div(id = "wordCountWarning", class = "text-danger") 
                             )
                           )
                         )
                ),

                tabPanel("Quick Glimpse",
                         fluidPage(
                           tags$div(class = "completion-box",
                                    h2("Quick Glimpse"),
                                    p("Based on the options selected, a personalized summary of preferences and interests has been created. It appears that the choices align with the following themes:"),
                                    DTOutput("predictedCareerPathsTable"),
                                    downloadButton("downloadCareerPaths", "Download Predicted Career Paths CSV", class = "btn-primary"),
                                    actionButton("nextToPostSurvey", "Next to Post Survey", class = "btn-primary")  # Make sure the button works
                           )
                         )
                ),

                tabPanel("Post Survey",
                         fluidPage(
                           tags$div(class = "completion-box",
                                    h2("Please Complete Post Survey"),
                                    p("Thank you for taking the time to participate in this survey. Your involvement is crucial for the success of our research study. The data you provide will be utilized for both the pilot testing and final results, helping us evaluate the effectiveness of the AI-guided platform. Your responses will directly inform how the platform is designed to assist undergraduate engineering students in selecting their majors. We deeply appreciate the valuable insights you are contributing to this project.

As a participant, your feedback will help us understand how students perceive and interact with AI when making academic decisions. We are committed to using the information gathered to refine the platform and ensure it meets the needs of students across various engineering disciplines. Your input is essential for enhancing the functionality and user experience of the system.

Once you complete the survey, you will be directed to the chatbot section, where you can engage with the AI tool. This section will give you the opportunity to interact with the platform firsthand and explore how it can assist with career and major decisions. Your experience with the chatbot will help us assess its performance and make necessary improvements before the final implementation.

We truly appreciate your time and effort in contributing to this research. Your participation will make a significant impact on the future development of the AI-guided platform. Should you have any questions or concerns during or after completing the survey, please don't hesitate to reach out to Dr. Javeed Kittur at jkittur@ou.edu. Thank you again for being a part of this important study!"),
                                    tags$a(href = "https://ousurvey.qualtrics.com/jfe/form/SV_3n3jlqsnkoMkn0W", target = "_blank", 
                                            class = "important-link", "Click here to complete the Post Survey"),
                                    actionButton("nextToWelcomeChatbot", "Next to Welcome Chatbot", class = "btn-primary")
                           )
                         )
                ),

                tabPanel("Welcome to Chatbot",
                         fluidPage(
                           tags$div(class = "welcome-box",
                                    img(src = "https://png.pngtree.com/png-clipart/20230401/original/pngtree-smart-chatbot-cartoon-clipart-png-image_9015126.png", height = "200px", align = "center"),
                                    h3("Welcome to Gemini Chatbot"),
                                    p("The Future Engineer Assistant (FEA) is an innovative AI-powered chatbot designed specifically to provide personalized career guidance for engineering students. By leveraging advanced natural language processing (NLP) and generative AI technologies, the FEA engages users in dynamic, interactive conversations that facilitate the exploration of potential career paths. Unlike traditional career counseling methods, which can be limited in personalization and immediacy, the FEA is capable of tailoring its responses based on real-time user inputs. This enables the chatbot to offer customized advice and insights that align more closely with individual interests and academic backgrounds."),
                                    p("At the heart of the FEA's functionality is its ability to generate context-specific questions aimed at uncovering important information about users’ preferences, aspirations, and academic strengths. By employing a generative AI model integrated through an API, the chatbot can produce engaging prompts that encourage students to reflect on their career goals. This dynamic questioning process not only enhances the depth of information gathered but also fosters an interactive environment where students feel comfortable exploring their options. The ability of the FEA to adaptively shift its dialogue based on input allows for a more personalized experience that feels less like a scripted interaction and more like a meaningful conversation with a knowledgeable mentor."),
                                    actionButton("nextToGeminiChatbot", "Next to Gemini Chatbot", class = "btn-primary")
                           )
                         )
                ),

                tabPanel("Ask Question Gemini Chatbot",
                         sidebarLayout(
                           sidebarPanel(
                             tags$h4("Would you like to have a conversation with a chatbot via text or audio?"),
                             radioButtons("input_method", "Choose Input Method:",
                                          choices = list("Text" = "text", "Audio Recording" = "audio"),
                                          inline = TRUE,
                                          selected = "text",
                                          width = '100%'),
                             uiOutput("voiceControls"),
                             tags$hr(),
                             textAreaInput("userInput", "Ask your question here:", placeholder = "Type your question here...", rows = 7)
                           ),
                           mainPanel(
                             tags$div(class = "pink-box chat-responses",
                                      tags$p("Ask the chatbot any questions regarding career-related topics."),
                                      tags$p("Type your question or use the audio feature for a more hands-free interaction."),
                                      div(class = "chat-history",
                                          DTOutput("chatOutputResponses")
                                      ),
                                      actionButton("loadingResponse", "Waiting for Response...", loading = TRUE, style = "display: none;"),
                                      actionButton("askQuestionBtn", "Ask Question", class = "btn-primary"),
                                      downloadButton("downloadChatbotResponses", "Download Chatbot Responses CSV", class = "btn-primary"),
                                      actionButton("nextToSalaryPage", "Next to Salary Insights", class = "btn-primary")
                             )
                           )
                         )
                ),

                tabPanel("Salary Prediction",
                         sidebarLayout(
                           sidebarPanel(
                             tags$h4("Instructions"),
                             tags$p("1. Select from a variety of engineering career paths and experience levels."),
                             tags$p("2. Provide this information to receive salary insights based on the latest industry standards."),
                             tags$p("3. Note the provided salary insights for future job negotiations."),
                             tags$hr(),
                             selectInput("job_title", "Select Job Title *",
                                         choices = NULL),  
                             selectInput("experience", "Select Experience Level *",
                                         choices = c("Entry Level", "Mid Level", "Senior Level")),
                             actionButton("askSalaryQuestions", "Get Salary Information", class = "btn-primary")
                           ),
                           mainPanel(
                             tags$div(class = "pink-box scrollable",
                                      DTOutput("salaryResponsesTable"),
                                      downloadButton("downloadSalaryResponses", "Download Salary Responses CSV", class = "btn-primary"),
                                      actionButton("loadingSalaryResponse", "Waiting for Response...", loading = TRUE, style = "display: none;"),
                                      plotlyOutput("salary_histogram"),
                                      plotlyOutput("salary_boxplot"),
                                      actionButton("nextToEndSession", "Next to End Session", class = "btn-primary")
                             )
                           )
                         )
                ),

                tabPanel("User Dashboard",
                         sidebarLayout(
                           sidebarPanel(
                             tags$h4("Your Dashboard"),
                             actionButton("viewChatHistory", "View Chat History", class = "btn-primary"),
                             actionButton("viewCareerPaths", "View Career Paths", class = "btn-primary")
                           ),
                           mainPanel(
                             tags$div(id = "dashboardOutput")
                           )
                         )
                ),

                tabPanel("Session Completed",  
                         fluidPage(
                           tags$div(class = "completion-box",
                                    h2("Session Completed"),
                                    p("The session has been completed!"),
                                    p("Thank you for completing your session with FSA. As a final step, feedback is appreciated through a brief survey."),
                                    a(href = "https://ousurvey.qualtrics.com/jfe/form/SV_3n3jlqsnkoMkn0W", target = "_blank", "Click here to take the survey:", style = "font-weight: bold; color: #841617; text-decoration: underline;")
                           )
                         )
                ),

                # New Interactive Career Path Visualization
                tabPanel("Career Path Visualization",
                         fluidPage(
                           titlePanel("Explore Your Career Path"),
                           tags$div("Select a career path to see the details."),
                           uiOutput("careerPathSelector"),
                           visNetworkOutput("careerPathNetwork")
                         )
                )
                )
      )
)

server <- function(input, output, session) {
  chat_history <- reactiveVal(data.frame(Role = character(), Message = character(), stringsAsFactors = FALSE))
  registered <- reactiveVal(FALSE)
  loggedIn <- reactiveVal(FALSE)
  preSurveyCompleted <- reactiveVal(FALSE)
  salary_responses <- reactiveVal(data.frame(Job_Title = character(), Experience_Level = character(), Response = character(), stringsAsFactors = FALSE))
  current_question_index <- reactiveVal(1)
  randomized_questions <- reactiveVal()  
  chatbot_responses <- reactiveVal(data.frame(Question = character(), Response = character(), stringsAsFactors = FALSE))
 
  user_details <- loadUserData()
  recommended_careers <- reactiveVal(NULL)
  predicted_career_paths <- reactiveVal(NULL)

  user_chat_history <- reactiveVal(data.frame(Date = character(), Chat = character(), stringsAsFactors = FALSE))
  user_career_paths <- reactiveVal(data.frame(Date = character(), Career_Path = character(), stringsAsFactors = FALSE))

  tabs_access <- reactiveVal(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE))

  observeEvent(input$registerBtn, {
    required_fields <- c(input$first_name, input$last_name, input$username, input$reg_password,
                         input$reg_password_reenter, input$email, input$school, input$year,
                         input$gender, input$terms)

    field_names <- c("First Name", "Last Name", "Username", "Password",
                     "Re-enter Password", "Email", "School", "Year",
                     "Gender Identity", "Terms and Conditions")

    empty_fields <- field_names[sapply(required_fields, function(x) is.na(x) || x == "")]
   
    if (length(empty_fields) > 0) {
      showModal(modalDialog(
        title = "Registration Warning",
        paste("Please complete the following fields:", paste(empty_fields, collapse = ", ")),
        easyClose = TRUE,
        footer = NULL,
        size = "m"
      ))
    } else {
      if (input$terms) {
        if (input$reg_password == input$reg_password_reenter) {
          hashed_password <- digest(input$reg_password, algo = "sha256")  
          new_user <- data.frame(Username = input$username, Password = hashed_password, stringsAsFactors = FALSE)
          user_details <<- rbind(user_details, new_user)  
          saveUserData(user_details)  
          registered(TRUE)
          shinyjs::enable("nextBtnReg")
          showModal(modalDialog(
            title = "Registration Successful",
            "Registration successful! Please log in.",
            easyClose = TRUE,
            footer = NULL
          ))
        } else {
          showModal(modalDialog(
            title = "Error",
            "Passwords do not match. Please try again.",
            easyClose = TRUE,
            footer = NULL
          ))
        }
      } else {
        showModal(modalDialog(
          title = "Terms and Conditions",
          "Agreement to the Terms and Conditions is required to proceed.",
          easyClose = TRUE,
          footer = NULL
        ))
      }
    }
  })
 
  output$registered <- reactive({ registered() })
  outputOptions(output, "registered", suspendWhenHidden = FALSE)
 
  output$loggedIn <- reactive({ loggedIn() })
  outputOptions(output, "loggedIn", suspendWhenHidden = FALSE)
 
  output$preSurveyCompleted <- reactive({ preSurveyCompleted() })
  outputOptions(output, "preSurveyCompleted", suspendWhenHidden = FALSE)
 
  observeEvent(input$confirmSurveyBtn, {
    if (input$preSurveyCheck) {
      preSurveyCompleted(TRUE)
      tabs_access(c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE))  
    }
  })
 
  observeEvent(input$continueToQuestionnaire, {
    tabs_access(c(TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE))  
    updateTabsetPanel(session, "tabs", selected = "Questionnaire")
  })
 
  observeEvent(input$loginBtn, {
    req(input$login_username, input$login_password)
    user <- user_details
    if (nrow(user) > 0) {
      showModal(modalDialog(
        title = "Loading",
        "Please wait while processing the request.",
        easyClose = TRUE,
        footer = NULL
      ))
      Sys.sleep(2)  
      hashed_login_password <- digest(input$login_password, algo = "sha256")  
      if (any(user$Username == input$login_username & user$Password == hashed_login_password)) {
        loggedIn(TRUE)
        resetChat()
        tabs_access(c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, TRUE))  
      } else {
        showModal(modalDialog(
          title = "Login Error",
          "Invalid credentials, please try again.",
          easyClose = TRUE,
          footer = NULL
        ))
      }
    } else {
      showModal(modalDialog(
        title = "Login Error",
        "No registered users found. Create an account to proceed.",
        easyClose = TRUE,
        footer = NULL
      ))
    }
  })
 
  observeEvent(input$navigateToRegistration, {
    registered(TRUE)
    loggedIn(FALSE)
  })
 
  observeEvent(input$navigateToLogin, {
    registered(FALSE)
    loggedIn(FALSE)
  })

  resetChat <- function() {
    current_question_index(1)
    chat_history(data.frame(Role = character(), Message = character(), stringsAsFactors = FALSE))
    chatbot_responses(data.frame(Question = character(), Response = character(), stringsAsFactors = FALSE))
    recommended_careers(NULL)
    predicted_career_paths(NULL)  
    questions <- generateCareerQuestions(api_key = "AIzaSyA2SPN3LIko1zwCQU58YHmLMf56OUVejiQ")  # Use your actual API key
    randomized_questions(questions)
    askCareerQuestions()
  }

  askCareerQuestions <- function() {
    if (current_question_index() <= length(randomized_questions())) {
      question <- randomized_questions()[current_question_index()]
      output$currentQuestion <- renderUI({
        tags$div(
          class = "rect-bubble",
          question
        )
      })
      current_question_index(current_question_index() + 1)
    } else {
      chat_history(rbind(chat_history(), data.frame(Role = "Bot", Message = "All questions answered! Please click the next button to see your predicted career paths.", stringsAsFactors = FALSE)))
      recommendCareers()
    }
  }

  output$errorMessage <- renderUI({
    req(input$chatbotAnswerInput)
    if (is.character(chat_history()) && nrow(chat_history()) > 0 &&
        chat_history()$Role[nrow(chat_history())] == "User") {
      last_question <- tail(chat_history()$Message, 1)
      answer_text <- input$chatbotAnswerInput
      if (!isCareerRelated(answer_text, api_key = "AIzaSyA2SPN3LIko1zwCQU58YHmLMf56OUVejiQ")) {  # Use your actual API key
        return(tags$div(class = "rect-bubble",
                        paste("The question asked was not answered:", last_question)))
      }
    }
    return(NULL)
  })

  observeEvent(input$submitAnswerBtn, {
    req(input$chatbotAnswerInput)
    answer_text <- input$chatbotAnswerInput

    # Check word count
    word_count <- str_count(answer_text, "\\S+")
    if (word_count < 3 || word_count > 120) {
      showModal(modalDialog(
        title = "Word Count Warning",
        "Please ensure your answer is between 3 to 120 words.",
        easyClose = TRUE,
        footer = NULL
      ))
      return()
    }

    if (answer_text == "") {
      showModal(modalDialog(
        title = "Input Warning",
        "Please answer Question #", current_question_index() - 1,
        easyClose = TRUE,
        footer = NULL
      ))
      return()
    }

    if (!isCareerRelated(answer_text, api_key = "AIzaSyA2SPN3LIko1zwCQU58YHmLMf56OUVejiQ")) {  # Use your actual API key
      showModal(modalDialog(
        title = "Off-Topic Warning",
        "Please stay on topic. Kindly provide a relevant answer to the question.",
        easyClose = TRUE,
        footer = NULL
      ))
      return()  
    }

    # Update chat history for user input
    chat_history(rbind(chat_history(), data.frame(Role = "User", Message = answer_text, stringsAsFactors = FALSE)))
    askCareerQuestions()
    updateTextAreaInput(session, "chatbotAnswerInput", value = "")
  })

  output$questionsProgress <- renderUI({
    answered <- current_question_index() - 1  
    total <- length(randomized_questions())
    progress <- round((answered / total) * 100)

    tags$div(class = "progress-box",
             tags$div(style = "border-radius: 10px; width: 100%; background-color: #f1f1f1;",
                      tags$div(style = paste0("width: ", progress, "%; background-color: #007bff; color: white; text-align: center; border-radius: 10px;"),
                               paste0(progress, "%"))
             )
    )
  })

  output$predictedCareerPaths <- renderUI({
    if (current_question_index() > length(randomized_questions())) {
      actionButton("nextToGlimpse", "Next to See Predicted Career Paths", class = "btn-primary")
    }
  })

  observeEvent(input$nextToGlimpse, {
    user_answers <- unlist(chat_history()[chat_history()$Role == "User", "Message"])
    predicted_career_paths(predictCareerPaths(user_answers, api_key = "AIzaSyA2SPN3LIko1zwCQU58YHmLMf56OUVejiQ"))  # Use your actual API key
   
    user_career_paths(rbind(user_career_paths(), data.frame(Date = Sys.Date(), Career_Path = paste(predicted_career_paths(), collapse = ", "), stringsAsFactors = FALSE)))

    tabs_access(c(TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE))  
    updateTabsetPanel(session, "tabs", selected = "Quick Glimpse")
  })

  output$predictedCareerPathsTable <- renderDT({
    req(predicted_career_paths())
    
    df <- data.frame(Career_Path = predicted_career_paths(), stringsAsFactors = FALSE)
    datatable(df, options = list(pageLength = 5, autoWidth = TRUE, 
                                  dom = 't', 
                                  columnDefs = list(list(className = 'dt-left', targets = 0))), 
              rownames = FALSE, 
              escape = FALSE)  # Escape to allow HTML
  })

  output$downloadCareerPaths <- downloadHandler(
    filename = function() {
      paste("predicted_career_paths_", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(predicted_career_paths(), file, row.names = FALSE)
    }
  );

  output$userInputUI <- renderUI({
    if (input$input_method == "audio") {
      textAreaInput("userInputAudio", "Ask your question via Audio:", placeholder = "Audio input...", rows = 4)
    } else {
      textAreaInput("userInput", "Ask your question here:", placeholder = "Type your question here...", rows = 4)
    }
  })

  observeEvent(input$askSalaryQuestions, {
    job_title_input <- input$job_title
    experience_level <- input$experience
   
    if (!is.null(job_title_input) && !is.null(experience_level)) {
      response <- predictSalary(job_title_input, experience_level, api_key = "AIzaSyA2SPN3LIko1zwCQU58YHmLMf56OUVejiQ")  # Use your actual API key
      salary_responses(rbind(salary_responses(), data.frame(Job_Title = job_title_input, Experience_Level = experience_level, Response = response, stringsAsFactors = FALSE)))
    }
  })

  output$salaryResponsesTable <- renderDT({
    salary_responses()
  }, options = list(pageLength = 5, autoWidth = TRUE));

  observe({
    updateSelectInput(session, "job_title", choices = predicted_career_paths())
  })

  output$downloadSalaryResponses <- downloadHandler(
    filename = function() {
      paste("salary_responses_", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(salary_responses(), file, row.names = FALSE)
    }
  )

  output$downloadChatbotResponses <- downloadHandler(
    filename = function() {
      paste("chatbot_responses_", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(chatbot_responses(), file, row.names = FALSE)
    }
  )

  observeEvent(input$askQuestionBtn, {
    req(input$userInput)
   
    user_text <- input$userInput
    predicted_paths <- predicted_career_paths()
    
    response_data <- connectCareerToChatbot(user_text, predicted_paths, api_key = "AIzaSyA2SPN3LIko1zwCQU58YHmLMf56OUVejiQ")  # Use your actual API key
    
    chat_history(rbind(chat_history(), data.frame(Role = "User", Message = user_text, stringsAsFactors = FALSE)))

    if (!is.null(response_data$warning)) {
      chat_history(rbind(chat_history(), data.frame(Role = "Bot", Message = response_data$warning, stringsAsFactors = FALSE)))
    }
   
    chat_history(rbind(chat_history(), data.frame(Role = "Bot", Message = response_data$response, stringsAsFactors = FALSE)))
    chatbot_responses(rbind(chatbot_responses(), data.frame(Question = user_text, Response = response_data$response, stringsAsFactors = FALSE)))

    user_chat_history(rbind(user_chat_history(), data.frame(Date = Sys.Date(), Chat = user_text, stringsAsFactors = FALSE)))

    updateTextAreaInput(session, "userInput", value = "")
  });

  output$chatOutputResponses <- renderDT({
    chatbot_responses()
  }, options = list(pageLength = 5, autoWidth = TRUE));

  observeEvent(input$nextToWelcomeChatbot, {
    updateTabsetPanel(session, "tabs", selected = "Welcome to Chatbot");
  })

  observeEvent(input$nextToGeminiChatbot, {
    updateTabsetPanel(session, "tabs", selected = "Ask Question Gemini Chatbot");
  })

  observeEvent(input$nextToSalaryPage, {
    updateTabsetPanel(session, "tabs", selected = "Salary Prediction");
  })

  observeEvent(input$nextToEndSession, {
    updateTabsetPanel(session, "tabs", selected = "Session Completed");
  })

  observeEvent(input$viewCareerPaths, {
    output$dashboardOutput <- renderUI({
      DT::datatable(user_career_paths(), options = list(pageLength = 5, autoWidth = TRUE))
    })
  })

  output$chatHistoryTable <- renderDT({
    req(user_chat_history())
    datatable(user_chat_history(), options = list(pageLength = 5, autoWidth = TRUE))
  })
  
  output$salaryResponsesHistoryTable <- renderDT({
    req(salary_responses())
    datatable(salary_responses(), options = list(pageLength = 5, autoWidth = TRUE))
  })

  output$voiceControls <- renderUI({
    if (input$input_method == "audio") {
      tags$div(
        actionButton("startVoiceBtn", "Start Voice Input", class = "btn-primary"),
        actionButton("stopVoiceBtn", "Stop Voice Input", class = "btn-danger"),
        tags$div(id = "stopwatch", "00:00:00"),
        tags$script(HTML("
          let recognition;
          let final_transcript = '';
          let timerInterval;
          let stopwatchRunning = false;
          let totalSeconds = 0;

          function startRecognition() {
            recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.continuous = false;
            recognition.interimResults = false;

            recognition.onresult = function(event) {
              final_transcript = event.results[0][0].transcript;
              Shiny.setInputValue('voice_input', final_transcript);
              respondToUser(final_transcript);
            };

            recognition.onerror = function(event) {
              console.error('Recognition error', event.error);
            };

            recognition.onend = function() {
            };

            recognition.start();
            startStopwatch();
          }

          function stopRecognition() {
            if (recognition && recognition.stop) {
              recognition.stop();
            }
            clearInterval(timerInterval);
            stopwatchRunning = false;
          }

          function startStopwatch() {
            if (!stopwatchRunning) {
              totalSeconds = 0;
              timerInterval = setInterval(updateStopwatch, 1000);
              stopwatchRunning = true;
            }
          }

          function updateStopwatch() {
            totalSeconds++;
            let hours = Math.floor(totalSeconds / 3600);
            let minutes = Math.floor((totalSeconds % 3600) / 60);
            let seconds = totalSeconds % 60;
            document.getElementById('stopwatch').innerHTML =
              (hours < 10 ? '0' + hours : hours) + ':' +
              (minutes < 10 ? '0' + minutes : minutes) + ':' +
              (seconds < 10 ? '0' + seconds : seconds);
          }

          function respondToUser(input) {
            Shiny.setInputValue('userInput', input);
            Shiny.setInputValue('askQuestionBtn', Math.random());
          }

          Shiny.addCustomMessageHandler('startRecognition', function(message) {
            startRecognition();
          });

          Shiny.addCustomMessageHandler('stopRecognition', function(message) {
            stopRecognition();
          });
        "))
      )
    } else {
      tags$div()  
    }
  })

  observeEvent(input$startVoiceBtn, {
    session$sendCustomMessage("startRecognition", list())
  })

  observeEvent(input$stopVoiceBtn, {
    session$sendCustomMessage("stopRecognition", list())
  })
 
  observe({
    disable <- !tabs_access()
    for (i in seq_along(disable)) {
      if (isTRUE(disable[i])) {
        shinyjs::disable(paste0("tabs", i))
      } else {
        shinyjs::enable(paste0("tabs", i))
      }
    }
  })

  # Privacy Policy Modal
  observeEvent(input$privacyPolicyClicked, {
    showModal(modalDialog(
      title = "Privacy Policy",
      tags$p("1. Introduction"),
      tags$p("Personal information privacy is a priority. This Privacy Policy outlines how personal data is collected, used, disclosed, and safeguarded when using our website and chatbot."),
      tags$p("2. Information We Collect"),
      tags$p("2.1 Personal Information"),
      tags$p("Personal information may be collected voluntarily through interactions with the chatbot."),
      tags$p("2.2 Usage Data"),
      tags$p("Certain information about website and chatbot usage is automatically collected."),
      tags$p("2.3 Cookies"),
      tags$p("Cookies and similar technologies enhance the user experience. Cookie preferences can be managed through browser settings."),
      tags$p("3. How We Use Your Information"),
      tags$p("3.1 To Provide Services"),
      tags$p("Personal information is used to operate and maintain website and chatbot services."),
      tags$p("3.2 To Improve Services"),
      tags$p("Information usage allows understanding and improvement of chatbot features."),
      tags$p("3.3 To Communicate"),
      tags$p("Contact information may be used to send updates and promotional materials."),
      tags$p("3.4 For Security"),
      tags$p("Information is utilized to detect and prevent unauthorized access."),
      tags$p("4. Information Sharing and Disclosure"),
      tags$p("Information will not be shared except with the research team. De-identified data may be published in research papers."),
      tags$p("5. Data Security"),
      tags$p("Technical and organizational measures are implemented to protect personal information."),
      tags$p("6. Your Data Rights"),
      tags$p("6.1 Access and Correction"),
      tags$p("Request access to or correction of personal information by contacting us."),
      tags$p("6.2 Deletion"),
      tags$p("Request deletion of personal information, subject to legal obligations."),
      tags$p("6.3 Data Portability"),
      tags$p("Request a copy of personal data in a structured format."),
      tags$p("7. Third-Party Links"),
      tags$p("Links to third-party websites are not the responsibility of the site."),
      tags$p("8. Changes to This Privacy Policy"),
      tags$p("Policy updates will be posted on this page."),
      footer = modalButton("Close")
    ))
  })
 
  # Terms and Conditions Modal
  observeEvent(input$termsAndConditionsClicked, {
    showModal(modalDialog(
      title = "Terms and Conditions",
      tags$p("1. Acceptance of Terms"),
      tags$p("By accessing and using this website and chatbot services, compliance with terms is required."),
      tags$p("2. Use of Services"),
      tags$p("2.1 Eligibility"),
      tags$p("Age requirement is 18 or parental/guardian consent."),
      tags$p("2.2 Purpose"),
      tags$p("This chatbot serves as a career guidance tool."),
      tags$p("2.3 Personal Use"),
      tags$p("Use of services is for personal purposes only."),
      tags$p("3. User Conduct"),
      tags$p("3.1 Prohibited Activities"),
      tags$p("Users must refrain from unlawful activities."),
      tags$p("3.2 Content Submission"),
      tags$p("Submitted content must be lawful."),
      tags$p("4. Privacy and Data Protection"),
      tags$p("4.1 Data Collection"),
      tags$p("Personal data is handled per the Privacy Policy."),
      tags$p("4.2 Confidentiality"),
      tags$p("Confidentiality of user information is prioritized."),
      tags$p("5. Intellectual Property"),
      tags$p("5.1 Ownership"),
      tags$p("All website content is owned or licensed to us."),
      tags$p("6. Disclaimer of Warranties"),
      tags$p("6.1 As-Is Basis"),
      tags$p("Services are provided 'as-is' without warranties."),
      tags$p("6.2 Information Accuracy"),
      tags$p("Verification from additional sources is encouraged."),
      tags$p("7. Limitation of Liability"),
      tags$p("Limitation on liability is to the maximum extent allowed by law."),
      tags$p("8. Modifications to Terms"),
      tags$p("Terms may change at any time."),
      tags$p("9. Termination"),
      tags$p("Access to the website may be terminated without notice."),
      tags$p("10. Information Accuracy Disclaimer"),
      tags$p("The chatbot provides useful information but may not reflect the latest industry updates."),
      footer = modalButton("Close")
    ))
  })

  # New Interactive Career Path Visualization Logic
  output$careerPathSelector <- renderUI({
    req(predicted_career_paths())
    selectInput("selected_career", "Select a Career Path", choices = predicted_career_paths(), selected = predicted_career_paths()[1])
  })

  output$careerPathNetwork <- renderVisNetwork({
    req(input$selected_career)
    selected_career <- input$selected_career
    career_steps <- getCareerPathSteps(selected_career, api_key = "AIzaSyA2SPN3LIko1zwCQU58YHmLMf56OUVejiQ")  # Use your actual API key

    # Create nodes and edges
    nodes <- data.frame(id = 1:length(career_steps), label = career_steps, stringsAsFactors = FALSE)
    edges <- data.frame(from = c(rep(1, length(career_steps)-1)), to = 2:length(career_steps))

    visNetwork(nodes, edges) %>%
      visNodes(shape = "box") %>%
      visEdges(arrows = "to") %>%
      visOptions(highlightNearest = TRUE) %>%
      visLayout(randomSeed = 123)
  })

  # Observer for Moving to the Post Survey
  observeEvent(input$nextToPostSurvey, {
    updateTabsetPanel(session, "tabs", selected = "Post Survey")
  })
}

shinyApp(ui = ui, server = server)
